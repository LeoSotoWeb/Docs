<%
	var el_type = element.toLowerCase().replace(/ /g, '');
%>

# Custom layouts

Although we try to provide many layouts with different options you've possibly run into a situation where you need to render the element in some specific way. With just a little PHP, HTML, or CSS coding knowledge you can easily make it render just like you want it to, by creating your own layout for an element.

Although you could just directly change and override the code of an existing layout, that will create confusions in the future as the default element behaviour would change without any indication.

What we suggest is to create your own layout (you can copy/paste an existing one) and store the resultant file in one of the ZOO overrable Elements folder. That way the file will be easily localizable and risk free on updates.

## Before starting

As much as we try to make our docs complete, with a system as versitle as ZOO and some of the integrations included in our elements (like WidgetKit and qTip) even our documentation might not make a potential rendering manner obvious. Feel free to ask us in our support center.

## Step 1. Locate the layouts path

The *<%= element %>* layouts are located in **plugins / system / zoo_zlelements / zoo_zlelements / elements / <%= el_type %> / tmpl / render** folder. If the layout supports sublayouts is those that you should work on, instead go to the **... / render / [MAIN LAYOUT] / _sublayouts** folder.

## Step 2. Create your layout

Copy one of the existing layouts in the path from the Step 1 and change it name to a custom one. Be sure to keep the underscore `_` at the begining of the file if it's a sublayout.

## Step 3. Place your layout

Your layout is ready but should be stored in a safe place, as we mentioned in the begining. You can place your custom layout in:

- **media / zoo / custom_elements / <%= el_type %> / tmpl / render**
	This path will make the layout available for all the Apps.
- **media / zoo / applications / [APP NAME] / elements / <%= el_type %> / tmpl / render**
	This path will make the layout available only for the App being placed in.

When dealing with sublayout, remember it should be placed into  **... / render / [MAIN LAYOUT] / _sublayouts** instead.

**Note**: if the **custom_elements** folder does not exist, just create it.

## Done!

Now that your layout is placed it can be selected when setting the Element view on the Positions assignment. Do so and start editing it until it suits your project needs.